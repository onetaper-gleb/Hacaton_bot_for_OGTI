import asyncio

import pygame
from aiogram import Bot
from aiogram.types import CallbackQuery, Message

from core.handlers.basic import users
from core.keyboards.reply import START_KEYBOARD
from core.keyboards.reply_teacher import WELCOMING_MESSAGE_TEACHER, REGISTRATION_TEACHER, REGISTRATION_SUCCESS_TEACHER, \
    MAIN_LOBBY_TEACHER, LESSONS_TEACHER, CREATE_LESSON, LESSON_PDF_CONV
from core.middlewares.Classes import Teacher
from core.middlewares.extra_gen import append_all_2
from core.middlewares.functions_teacher import checker_teach, lecture_add

teachers = pygame.sprite.Group()


async def delete_message(message: Message):
    await message.delete()


def start_teacher(spisok):
    if spisok:
        for i in spisok:
            Teacher(int(i[1]), i[0], int(i[2]), teachers)


async def welcoming_message_teacher(call: CallbackQuery):
    id_us = call.message.chat.id
    for i in users:
        if i.chat_id == id_us:
            m = checker_teach(i.username)
            if m:
                for j in teachers:
                    if str(j.chat_id) == str(id_us):
                        j.subs = m
                else:
                    Teacher(i.id, i.username, i.chat_id, teachers, add=True)
                    for j in teachers:
                        if j.chat_id == id_us:
                            j.subs = m
                            j.previous_actions.append((welcoming_message_teacher, call.message))
                            break
                await call.message.delete()
                await call.message.answer(f'''–û—Ç–ª–∏—á–Ω–æ! üëç

–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, —Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ üë®‚Äçüéì

–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ‚û°Ô∏è''',
                                          reply_markup=WELCOMING_MESSAGE_TEACHER.as_markup())
            else:
                await call.message.edit_text(f'''–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∏—Ç–µ–ª–µ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–∞–º
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å! üëá''', reply_markup=START_KEYBOARD.as_markup())
            break


async def registered_message(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            if j.previous_actions[-1][0] == registration_step_2_teach:
                await asyncio.create_task(registration_step_3_teach(message))
            elif j.previous_actions[-1][0] == registration_step_3_teach:
                await asyncio.create_task(registration_step_4_teach(message))
            elif j.previous_actions[-1][0] == registration_step_4_teach:
                await asyncio.create_task(registration_step_5_teach(message))
            elif j.previous_actions[-1][0] == registration_step_5_teach:
                await asyncio.create_task(registration_step_6_teach(message))
            elif j.previous_actions[-1][0] == registration_step_6_teach:
                await asyncio.create_task(registration_step_7_teach(message))



async def registration_teacher(call: CallbackQuery):
    id_us = call.message.chat.id
    for j in teachers:
        if j.chat_id == id_us:
            await call.message.edit_text('–ü—Ä–æ–π–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é', reply_markup=REGISTRATION_TEACHER.as_markup())


async def registration_step_2_teach(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append(
                (registration_step_2_teach, await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –§–∞–º–∏–ª–∏—é")))
            break


async def registration_step_3_teach(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_3_teach, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")))
            break


async def registration_step_4_teach(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_4_teach, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –æ—Ç—á–µ—Å—Ç–≤–æ")))
            break


async def registration_step_5_teach(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_5_teach, await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")))
            break


async def registration_step_6_teach(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_6_teach, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")))
            break


async def registration_step_7_teach(message: Message):
    for j in teachers:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_7_teach, message))
            append_all_2(j.registration_list, j.id)
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å. ‚úÖ', reply_markup=REGISTRATION_SUCCESS_TEACHER.as_markup())
            break


async def main_lobby_teacher(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append((main_lobby_teacher, call.message))
            await call.message.answer(f'–û–ø–∏—Å–∞–Ω–∏–µ',
                                 reply_markup=MAIN_LOBBY_TEACHER.as_markup())
            break


async def Lessons_teacher(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((Lessons_teacher, call.message))
            await call.message.edit_text(f'''–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–£—Ä–æ–∫–∏" üëÄ
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫–∏ –∏–ª–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º–∏''',
                                      reply_markup=LESSONS_TEACHER.as_markup())
            break


async def Create_lesson(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((Create_lesson, call.message))
            await call.message.edit_text(f'''–í—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —É—Ä–æ–∫! üë®‚Äçüè´
 –í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å''',
                                         reply_markup=CREATE_LESSON.as_markup())
            break


async def Create_lecture(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((Create_lecture, call.message))
            await call.message.edit_text(f'''–í—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å "–ª–µ–∫—Ü–∏—é"‚úçÔ∏è
–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª —Å –ª–µ–∫—Ü–∏–µ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF''')
            break


async def Create_test(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((Create_test, call.message))
            await call.message.edit_text(f'''–í—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å "–¢–µ—Å—Ç"‚úçÔ∏è
–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª —Å —Ç–µ—Å—Ç–æ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF''')
            break


async def Create_lab(call: CallbackQuery):
    for j in teachers:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((Create_lab, call.message))
            await call.message.edit_text(f'''–í—ã –∑–∞—Ö–æ—Ç–µ–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å "–ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω—É—é —Ä–∞–±–æ—Ç—É"‚úçÔ∏è
–°–∫–∏–Ω—å—Ç–µ —Ñ–∞–π–ª —Å –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π —Ä–∞–±–æ—Ç–æ–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF''')
            break



async def get_pdf_teach(message: Message, bot: Bot):
    for j in teachers:
        if j.chat_id == message.chat.id and j.previous_actions:
            if j.previous_actions[-1][0] == Create_lecture:
                await asyncio.create_task(pdf_load_to_bd(message, bot, 'lecture'))
            elif j.previous_actions[-1][0] == Create_lab:
                await asyncio.create_task(pdf_load_to_bd(message, bot, 'lab'))
            elif j.previous_actions[-1][0] == Create_test:
                await asyncio.create_task(pdf_load_to_bd(message, bot, 'test'))
            break


async def pdf_load_to_bd(message: Message, bot: Bot, typ):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    for j in teachers:
        if j.chat_id == message.chat.id:
            if typ == 'lecture':
                await bot.download_file(file_path, f"lectures/{lecture_add(file_id[1:10], j.subs)}")
                await message.answer("–õ–µ–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ—ë –∫–æ–º—É-–Ω–∏–±—É–¥—å", reply_markup=LESSON_PDF_CONV.as_markup())
            elif typ == 'lab':
                await bot.download_file(file_path, f"lectures/{lecture_add(file_id[1:10], j.subs)}")
                await message.answer("–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ—ë –∫–æ–º—É-–Ω–∏–±—É–¥—å", reply_markup=LESSON_PDF_CONV.as_markup())
            elif typ == 'test':
                await bot.download_file(file_path, f"lectures/{lecture_add(file_id[1:10], j.subs)}")
                await message.answer("–¢–µ—Å—Ç –¥–æ–±–∞–≤–ª–µ–Ω–∞, –ø–æ—Ä–∞ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –µ–≥–æ –∫–æ–º—É-–Ω–∏–±—É–¥—å", reply_markup=LESSON_PDF_CONV.as_markup())
