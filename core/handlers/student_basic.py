import asyncio

import pygame
from aiogram.types import Message, CallbackQuery, FSInputFile

from core.handlers.admin_basic import admin_message_register
from core.keyboards.reply_student import FIRST_MAIN, ID_ENTER_1, ID_ENTER_2, TO_REGISTRATE, REGISTRATION_SUCCESS, \
    LOBBY_MARKUP, PROFILE_STUDENT, SUBJECT
from core.handlers.basic import users
from core.middlewares.Classes import Student
from core.middlewares.extra_gen import generate_password, exists, existing_id, append_all
from core.middlewares.functions_student import subjects_student_choose, get_schedule

students = pygame.sprite.Group()


def start_students(spisok, spisok2):
    if spisok:
        for i in spisok:
            Student(int(i[1]), i[0], int(i[2]), students)
    for j in students:
        for i in spisok2:
            j.group_name = i[0]
            j.group_description = i[1]


async def return_back(call: CallbackQuery):
    for j in students:
        if str(j.chat_id) == str(call.message.chat.id):
            await asyncio.create_task(j.previous_actions[-1][0](call))
            break


async def delete_message(message: Message):
    await message.delete()


async def welcoming_message(call: CallbackQuery):
    id_us = call.message.chat.id
    for i in users:
        if i.chat_id == id_us:
            for j in students:
                if str(j.chat_id) == str(id_us):
                    break
            else:
                Student(i.id, i.username, i.chat_id, students, add=True)

                for j in students:
                    if j.chat_id == id_us:
                        j.previous_actions.append((welcoming_message, call.message))
                break
    await call.message.delete()
    await call.message.answer(f'''–¢–µ–ø–µ—Ä—å, –¥–ª—è —Ç–æ–≥–æ —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç –û–ì–¢–ò, –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø—Ä–æ–π—Ç–∏ –≤–∞–º –æ–±—É—á–µ–Ω–∏–µ.  
–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É ¬´–û–±—É—á–µ–Ω–∏–µ¬ª üë®‚Äçüéì 

–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ‚û°Ô∏è''', reply_markup=FIRST_MAIN.as_markup())


async def id_wait(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((welcoming_message, call.message))
            break
    await call.message.delete()
    await call.message.answer(f'''–¢–µ–ø–µ—Ä—å, –≤–≤–µ–¥–∏—Ç–µ ID –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã, —á—Ç–æ–±—ã –≤–∞—à–∏ —É—á–∏—Ç–µ–ª—è –º–æ–≥–ª–∏ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –≤–∞–º —É—Ä–æ–∫–∏!üë®‚Äçüè´''', reply_markup=ID_ENTER_1.as_markup())\


async def id_wait_2(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.previous_actions.append((welcoming_message, message))
            break
    await message.answer('–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–≥–æ ID –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.', reply_markup=ID_ENTER_1.as_markup())


async def id_wait_change(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((id_wait, call.message))
            break
    await call.message.edit_text('–í–≤–æ–¥–∏—Ç–µ:')


async def group_exists(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.previous_actions.append((group_exists, message))
            await message.answer(f'''–í—ã –≤–æ—à–ª–∏ –≤ –≥—Ä—É–ø–ø—É {j.group_name} üòÑ 

–¢–µ–ø–µ—Ä—å, —á—Ç–æ–±—ã —É—á–∏—Ç–µ–ª—å —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å, –∫—Ç–æ –∑–∞—à–µ–ª –≤ –≥—Ä—É–ø–ø—É –∏ –º–æ–≥ –ø–æ–ª—É—á–∏—Ç—å –≤–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–π–¥–∏—Ç–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! ‚úÖ"''',
                                 reply_markup=TO_REGISTRATE.as_markup())
            break


async def registered_message(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            if j.previous_actions[-1][0] == id_wait:
                exist, group_name, group_description = exists(message, j.id)
                if exist:
                    j.group_name = group_name
                    j.group_description = group_description
                    await asyncio.create_task(group_exists(message))
                else:
                    await asyncio.create_task(id_wait_2(message))
            elif j.previous_actions[-1][0] == registration_step_1:
                exist = existing_id(message, j.id)
                if exist:
                    await asyncio.create_task(registration_step_2(message))
            elif j.previous_actions[-1][0] == registration_step_2:
                await asyncio.create_task(registration_step_3(message))
            elif j.previous_actions[-1][0] == registration_step_3:
                await asyncio.create_task(registration_step_4(message))
            elif j.previous_actions[-1][0] == registration_step_4:
                await asyncio.create_task(registration_step_5(message))
            elif j.previous_actions[-1][0] == registration_step_5:
                await asyncio.create_task(registration_step_6(message))
            elif j.previous_actions[-1][0] == registration_step_6:
                await asyncio.create_task(registration_step_7(message))
            elif j.previous_actions[-1][0] == choose_subject:
                await asyncio.create_task(subject_menu(message))
            break
    else:
        await asyncio.create_task(admin_message_register(message))


async def registration_step_1(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append((registration_step_1, await call.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–∞—Ä–æ–ª—å")))
            break


async def registration_step_2(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_2, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é —Ñ–∞–º–∏–ª–∏—é")))
            break


async def registration_step_3(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_3, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –∏–º—è")))
            break


async def registration_step_4(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_4, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—ë –æ—Ç—á–µ—Å—Ç–≤–æ")))
            break


async def registration_step_5(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_5, await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω")))
            break


async def registration_step_6(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            j.previous_actions.append((registration_step_6, await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –ø–æ—á—Ç—É")))
            break


async def registration_step_7(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            await asyncio.create_task(delete_message(message))
            j.registration_list.append(message.text)
            append_all(j.registration_list, j.id)
            j.previous_actions.append((registration_step_7, message))
            await message.answer(f'–í—ã —É—Å–ø–µ—à–Ω–æ –≤–æ—à–ª–∏ –≤ –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞ {j.group_name}. ‚úÖ', reply_markup=REGISTRATION_SUCCESS.as_markup())
            break


async def lobby_student(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append((lobby_student, call.message))
            await call.message.answer(f"""–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –≥—Ä—É–ø–ø—ã {j.group_name}!üëè 
            
{j.group_description}""", reply_markup=LOBBY_MARKUP.as_markup())
            break


async def profile_student(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            await call.message.answer(f"""–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ü—Ä–æ—Ñ–∏–ª—å" üëÄ
 –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –≤–∞—à—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, –∏–∑–º–µ–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—Å ‚úçÔ∏è
 –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ üëá""", reply_markup=PROFILE_STUDENT.as_markup())
            break


async def choose_subject(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            await asyncio.create_task(delete_message(call.message))
            subs = subjects_student_choose(j.group_name)
            strok = '\n'.join(subs)
            j.previous_actions.append((choose_subject, await call.message.answer(f"""–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–í—ã–±—Ä–∞—Ç—å –ø—Ä–µ–¥–º–µ—Ç" üëÄ
–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–π—Ç–∏ —É—Ä–æ–∫üë®‚Äçüè´\n\n{strok}""")))
            break


async def subject_menu(message: Message):
    for j in students:
        if j.chat_id == message.chat.id:
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.previous_actions.append((choose_subject, message))
            subs = subjects_student_choose(j.group_name)
            for i in subs:
                if i.startswith(message.text):
                    strok = i[3:].split(' - ')
                    break
            await message.answer(f"""{strok[0]}

–î–ª—è –≤—ã–±–æ—Ä–∞ –¥–µ–π—Å—Ç–≤–∏—è, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüëá""", reply_markup=SUBJECT.as_markup())
            break


async def send_schedule(call: CallbackQuery):
    for j in students:
        if j.chat_id == call.message.chat.id:
            sch = get_schedule(j.group_name)
            file = FSInputFile(path=sch)
            await call.message.answer_document(file)
