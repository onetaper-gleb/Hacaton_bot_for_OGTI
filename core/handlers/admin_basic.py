import asyncio

import pygame
from aiogram import Bot
from aiogram.types import CallbackQuery, Message
from core.handlers.basic import users
from core.keyboards.reply import START_KEYBOARD
from core.keyboards.reply_admins import FIRST_MAIN, MAIN, ADMIN_CONTROL, GROUPS_CHECK, CREATE_GROUP_5, CREATED_GROUP, \
    TEACHER_SETTINGS, CREATED_TEACHER
from core.middlewares.Classes import Admin
from core.middlewares.functions_admin import checker, checker_2, add_admin_to_bd, groups_to_see, get_subs, \
    create_group_bd, schedule_add, create_teacher_bd

admins = pygame.sprite.Group()


def start_admin(spisok):
    if spisok:
        for i in spisok:
            Admin(int(i[1]), i[0], int(i[2]), admins)
            print(i)


async def delete_message(message: Message):
    await message.delete()


async def welcoming_message_ad(call: CallbackQuery):
    id_us = call.message.chat.id
    for i in users:
        if i.chat_id == id_us:
            if checker(i.username):
                for j in admins:
                    print(j.username)
                    if str(j.chat_id) == str(id_us):
                        break
                else:
                    Admin(i.id, i.username, i.chat_id, admins, add=True)
                    for j in admins:
                        if j.chat_id == id_us:
                            j.previous_actions.append((welcoming_message_ad, call.message))
                            break
                await call.message.delete()
                await call.message.answer(f'''–û—Ç–ª–∏—á–Ω–æ! üëç
                
–ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, —Å–æ–≤–µ—Ç—É–µ–º –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ üë®‚Äçüéì

–ï—Å–ª–∏ –≤—ã —É–∂–µ –ø—Ä–æ—à–ª–∏ –æ–±—É—á–µ–Ω–∏–µ –∏–ª–∏ —Ö–æ—Ç–∏—Ç–µ –µ–≥–æ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ¬´–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å¬ª ‚û°Ô∏è''', reply_markup=FIRST_MAIN.as_markup())
            else:
                await call.message.edit_text(f'''–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–æ–º, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –¥–µ–π—Å—Ç–≤—É—é—â–∏–º –∞–¥–º–∏–Ω–∞–º
–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å! üëá''', reply_markup=START_KEYBOARD.as_markup())


async def main_menu_admin(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            try:
                if j.previous_actions[-1][0] == teacher_settings:
                    j.page = 0
            except:
                pass
            await delete_message(call.message)
            j.previous_actions.append((main_menu_admin, call.message))
            break
    await call.message.answer(f'''–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞! ‚úÖ
–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–ø–æ–ª–Ω–∏—Ç—å, –Ω–∞–∂–∞–≤ –æ–¥–Ω—É –∏–∑ –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µüëá''', reply_markup=MAIN.as_markup())


async def admin_control(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            await delete_message(call.message)
            j.previous_actions.append((admin_control, call.message))
            break
    adminers = checker_2()
    ret = []
    for i in range(len(adminers)):
        ret.append(f'{str(i + 1)}. @{adminers[i][0]}')
    ret = '\n'.join(ret)
    await call.message.answer(f'''–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è" üëÄ
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üéñ
    
{ret}''', reply_markup=ADMIN_CONTROL.as_markup())


async def admin_delete(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            j.previous_actions.append((admin_delete, call.message))
            break
    adminers = checker_2()
    ret = []
    for i in range(len(adminers)):
        ret.append(f'{str(i + 1)}. @{adminers[i][0]}')
    ret = '\n'.join(ret)
    await call.message.edit_text(f'''–í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å

{ret}''')


async def admin_add_1(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            await delete_message(call.message)
            j.previous_actions.append((admin_add_1, await call.message.answer(f'''–í–≤–µ–¥–∏—Ç–µ —Ç–µ–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ @
–ü—Ä–∏–º–µ—Ä: Hleb_sin''')))
            break


async def admin_message_register(message: Message):
    for j in admins:
        print(message.from_user.username, j.username)
        if j.chat_id == message.chat.id:
            print("SUCCESS")
            if j.previous_actions[-1][0] == admin_add_1:
                add_admin_to_bd(message.text)
                await asyncio.create_task(admin_control_2(message))
            elif j.previous_actions[-1][0] == admin_delete:
                add_admin_to_bd(message.text, add=False)
                await asyncio.create_task(admin_control_2(message))
            elif j.previous_actions[-1][0] == groups_check:
                await asyncio.create_task(group_check(message))
                print('Hey')
            elif j.previous_actions[-1][0] == create_group_1:
                await asyncio.create_task(create_group_2(message))
                print('Hey')
            elif j.previous_actions[-1][0] == create_group_2:
                await asyncio.create_task(create_group_3(message))
            elif j.previous_actions[-1][0] == create_group_3:
                await asyncio.create_task(create_group_5(message))
            elif j.previous_actions[-1][0] == create_group_5:
                await asyncio.create_task(group_created(message))
            elif j.previous_actions[-1][0] == create_teacher_1:
                await asyncio.create_task(create_teacher_2(message))
            elif j.previous_actions[-1][0] == create_teacher_2:
                await asyncio.create_task(create_teacher_3(message))
            elif j.previous_actions[-1][0] == create_teacher_3:
                await asyncio.create_task(created_teacher(message))
            break


async def admin_control_2(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await delete_message(message)
            await delete_message(j.previous_actions[-1][1])
            j.previous_actions.append((admin_control, message))
            break
    adminers = checker_2()
    ret = []
    for i in range(len(adminers)):
        ret.append(f'{str(i + 1)}. @{adminers[i][0]}')
    ret = '\n'.join(ret)
    await message.answer(f'''–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è" üëÄ
–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ üéñ
    
{ret}''', reply_markup=ADMIN_CONTROL.as_markup())


async def groups_check(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            res = groups_to_see()
            ans = []
            if res:
                for i in range(len(res)):
                    ans.append(f'{i + 1}. {res[i][0]} {res[i][1]}')
                ans = "\n".join(ans)
                await call.message.edit_text(f'''–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Å–º–æ—Ä—Ç–µ—Ç—å

{ans}''', reply_markup=GROUPS_CHECK.as_markup())
            else:
                await call.message.edit_text(f'''–ü–æ–∫–∞ —á—Ç–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –≥—Ä—É–ø–ø—ã –∫—É—Ä—Å–∞, —Å–∞–º–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞—Ç—å.''',
                                             reply_markup=GROUPS_CHECK.as_markup())
            j.previous_actions.append((groups_check, call.message))
            break


async def group_check(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            res = groups_to_see(one=message.text)
            ans = []
            ans_1 = []
            if res:
                ans.append(f'{res[0][0][0]} - {res[0][0][1]} \n \n {res[0][0][2]}')
                ans.append('\n\n–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤: \n')
                for i in range(len(res[1])):
                    ans.append(
                        f'\n {i + 1}. {res[1][i][0]} {res[1][i][1]} {res[1][i][2]} {res[1][i][3]} {res[1][i][4]}')
                ans.append('\n\n–°–ø–∏—Å–æ–∫ –ø—Ä–µ–¥–º–µ—Ç–æ–≤: \n')
                for i in range(len(res[2])):
                    ans.append(f'\n {i + 1}. {res[2][i]}')
                ans = "\n".join(ans)
                j.previous_actions.append((groups_check, await message.answer(f'''–í–æ—Ç –¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã:

            {ans}''', reply_markup=GROUPS_CHECK.as_markup())))
            else:
                res = groups_to_see()
                ans = []
                if res:
                    for i in range(len(res)):
                        ans.append(f'{i + 1}. {res[i][0]} {res[i][1]}')
                    ans = "\n".join(ans)
                    j.previous_actions.append((groups_check, await message.answer(f'''–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –≤–≤–µ–ª–∏ –Ω–æ–º–µ—Ä –∫–æ—Ä–µ–∫—Ç–Ω–æ

            {ans}''', reply_markup=GROUPS_CHECK.as_markup())))
            break


async def create_group_1(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append((create_group_1, await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫—É—Ä—Å–∞')))
            break

async def create_group_2(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            j.previous_actions.append((create_group_2, await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫—É—Ä—Å–∞')))
            break


async def create_group_3(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            j.previous_actions.append((create_group_3, await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤ –∫—É—Ä—Å–∞')))
            break


async def create_group_5(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            subs = get_subs(j.page)
            subs = '\n'.join(subs)
            j.previous_actions.append((create_group_5, await message.answer(f'''–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª
            
{subs}''', reply_markup=CREATE_GROUP_5.as_markup())))
            break


async def create_group_5_2(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            j.page += 1
            subs = get_subs(j.page)
            subs = '\n'.join(subs)
            j.previous_actions.append((create_group_5, call.message))
            await call.message.edit_text(f'''–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

{subs}''', reply_markup=CREATE_GROUP_5.as_markup())
            break


async def group_created(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            passes, password = create_group_bd(j.new_cours)
            passes = "\n".join(passes)
            j.previous_actions.append((group_created, await message.answer(f'''–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É –∫—É—Ä—Å–∞ {j.new_cours[0]}, –µ—ë –ø–∞—Ä–æ–ª—å: {password}

–ü–∞—Ä–æ–ª–∏ —É—á–µ–Ω–∏–∫–æ–≤:

{passes}

–î–æ–±–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫ –≥—Ä—É–ø–ø–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ pdf''')))
            j.new_cours = []
            j.page = 0
            break


async def get_pdf(message: Message, bot: Bot):
    for j in admins:
        if j.chat_id == message.chat.id:
            if j.previous_actions[-1][0] == group_created:
                await asyncio.create_task(pdf_load_to_bd(message, bot))


async def pdf_load_to_bd(message: Message, bot: Bot):
    file_id = message.document.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    await bot.download_file(file_path, f"schedules/{schedule_add()}")
    await message.answer("–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º —Å —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–µ–π", reply_markup=CREATED_GROUP.as_markup())


async def teacher_settings(call: CallbackQuery):
    for j in admins:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((teacher_settings, call.message))
            subs = get_subs(j.page, id=True)
            subs = '\n'.join(subs)
            await call.message.edit_text(f'''–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

{subs}''', reply_markup=TEACHER_SETTINGS.as_markup())
            break


async def teacher_settings_2(call: CallbackQuery):
    for j in admins:
        if j.chat_id == call.message.chat.id:
            j.previous_actions.append((teacher_settings, call.message))
            j.page += 1
            subs = get_subs(j.page, id=True)
            subs = '\n'.join(subs)
            await call.message.edit_text(f'''–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –∏–∑ —Å–ø–∏—Å–∫–∞ –∏ –∑–∞–ø–∏—à–∏—Ç–µ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª

{subs}''', reply_markup=TEACHER_SETTINGS.as_markup())
            break


async def create_teacher_1(call: CallbackQuery):
    for j in admins:
        if str(j.chat_id) == str(call.message.chat.id):
            await asyncio.create_task(delete_message(call.message))
            j.previous_actions.append((create_teacher_1, await call.message.answer('–í–≤–µ–¥–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç')))
            break


async def create_teacher_2(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            j.previous_actions.append((create_teacher_2, await message.answer('–í–≤–µ–¥–∏—Ç–µ –§–ò–û —É—á–∏—Ç–µ–ª—è')))
            break


async def create_teacher_3(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            j.previous_actions.append((create_teacher_3, await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ç–µ–ª–µ–≥—Ä–∞–º —Ç–µ–≥ —É—á–∏—Ç–µ–ª—è –ø–æ –ø—Ä–∏–º–µ—Ä—É: Hleb_sin')))
            break


async def created_teacher(message: Message):
    for j in admins:
        if str(j.chat_id) == str(message.chat.id):
            await asyncio.create_task(delete_message(message))
            await asyncio.create_task(delete_message(j.previous_actions[-1][1]))
            j.new_cours.append(message.text)
            create_teacher_bd(j.new_cours)
            j.new_cours = []
            j.previous_actions.append((create_teacher_3, await message.answer('–í—ã –¥–æ–±–∞–≤–∏–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–µ–¥–º–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É —É—á–∏—Ç–µ–ª–µ–π', reply_markup=CREATED_TEACHER.as_markup())))
            break


